import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, e as element, b as space, t as text, c as create_component, f as claim_element, g as children, h as claim_space, j as claim_text, a as detach_dev, k as claim_component, l as attr_dev, m as add_location, o as insert_dev, p as append_dev, r as mount_component, u as listen_dev, w as transition_in, x as transition_out, y as destroy_component } from './client.9586d249.js';
import { c as csvParse } from './operation.6e105956.js';
import DynamicTrend from './DynamicTrend.eff4c3f7.js';
import PopularityBarChart from './PopularityBarChart.4b6c82be.js';
import PopularitySharePieChart from './PopularitySharePieChart.260377d1.js';

const DATA_PATH = 'data';

async function loadCSV(filename) {
    const res = await this.fetch(`${DATA_PATH}/${filename}`);
    return csvParse(await res.text());
}

/* src/routes/steam-game/index.svelte generated by Svelte v3.35.0 */
const file = "src/routes/steam-game/index.svelte";

function create_fragment(ctx) {
	let div2;
	let h1;
	let img;
	let img_src_value;
	let t0;
	let span;
	let t1;
	let t2;
	let div0;
	let popularitybarchart;
	let t3;
	let popularitysharepiechart;
	let t4;
	let div1;
	let dynamictrend;
	let current;
	let mounted;
	let dispose;

	popularitybarchart = new PopularityBarChart({
			props: {
				onMouseOver: /*onMouseOverHandler*/ ctx[3],
				onMouseOut: /*onMouseOutHandler*/ ctx[4],
				onClickChartArea: /*onClickChartArea*/ ctx[6],
				selectedData: /*selectedData*/ ctx[1],
				focusedData: /*focusedData*/ ctx[2],
				rawData: /*rawData*/ ctx[0]
			},
			$$inline: true
		});

	popularitysharepiechart = new PopularitySharePieChart({
			props: {
				onMouseOver: /*onMouseOverHandler*/ ctx[3],
				onMouseOut: /*onMouseOutHandler*/ ctx[4],
				onClickChartArea: /*onClickChartArea*/ ctx[6],
				selectedData: /*selectedData*/ ctx[1],
				focusedData: /*focusedData*/ ctx[2],
				rawData: /*rawData*/ ctx[0]
			},
			$$inline: true
		});

	dynamictrend = new DynamicTrend({
			props: {
				data: /*focusedData*/ ctx[2] || /*selectedData*/ ctx[1],
				rawData: /*rawData*/ ctx[0]
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div2 = element("div");
			h1 = element("h1");
			img = element("img");
			t0 = space();
			span = element("span");
			t1 = text("Steam Game Dashboard (2012 - 2021)");
			t2 = space();
			div0 = element("div");
			create_component(popularitybarchart.$$.fragment);
			t3 = space();
			create_component(popularitysharepiechart.$$.fragment);
			t4 = space();
			div1 = element("div");
			create_component(dynamictrend.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div2 = claim_element(nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			h1 = claim_element(div2_nodes, "H1", { class: true });
			var h1_nodes = children(h1);
			img = claim_element(h1_nodes, "IMG", { src: true, alt: true, class: true });
			t0 = claim_space(h1_nodes);
			span = claim_element(h1_nodes, "SPAN", { class: true });
			var span_nodes = children(span);
			t1 = claim_text(span_nodes, "Steam Game Dashboard (2012 - 2021)");
			span_nodes.forEach(detach_dev);
			h1_nodes.forEach(detach_dev);
			t2 = claim_space(div2_nodes);
			div0 = claim_element(div2_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			claim_component(popularitybarchart.$$.fragment, div0_nodes);
			t3 = claim_space(div0_nodes);
			claim_component(popularitysharepiechart.$$.fragment, div0_nodes);
			div0_nodes.forEach(detach_dev);
			t4 = claim_space(div2_nodes);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			claim_component(dynamictrend.$$.fragment, div1_nodes);
			div1_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			if (img.src !== (img_src_value = "icons/steam.svg")) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", "steam icon");
			attr_dev(img, "class", "svelte-16m4r7n");
			add_location(img, file, 43, 8, 1046);
			attr_dev(span, "class", "svelte-16m4r7n");
			add_location(span, file, 44, 8, 1101);
			attr_dev(h1, "class", "svelte-16m4r7n");
			add_location(h1, file, 42, 4, 1033);
			attr_dev(div0, "class", "main-chart svelte-16m4r7n");
			add_location(div0, file, 47, 4, 1164);
			attr_dev(div1, "class", "dynamic-chart svelte-16m4r7n");
			add_location(div1, file, 65, 4, 1675);
			attr_dev(div2, "class", "container svelte-16m4r7n");
			add_location(div2, file, 41, 0, 977);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div2, anchor);
			append_dev(div2, h1);
			append_dev(h1, img);
			append_dev(h1, t0);
			append_dev(h1, span);
			append_dev(span, t1);
			append_dev(div2, t2);
			append_dev(div2, div0);
			mount_component(popularitybarchart, div0, null);
			append_dev(div0, t3);
			mount_component(popularitysharepiechart, div0, null);
			append_dev(div2, t4);
			append_dev(div2, div1);
			mount_component(dynamictrend, div1, null);
			current = true;

			if (!mounted) {
				dispose = listen_dev(div2, "click", /*onClickEmptyArea*/ ctx[5], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			const popularitybarchart_changes = {};
			if (dirty & /*selectedData*/ 2) popularitybarchart_changes.selectedData = /*selectedData*/ ctx[1];
			if (dirty & /*focusedData*/ 4) popularitybarchart_changes.focusedData = /*focusedData*/ ctx[2];
			if (dirty & /*rawData*/ 1) popularitybarchart_changes.rawData = /*rawData*/ ctx[0];
			popularitybarchart.$set(popularitybarchart_changes);
			const popularitysharepiechart_changes = {};
			if (dirty & /*selectedData*/ 2) popularitysharepiechart_changes.selectedData = /*selectedData*/ ctx[1];
			if (dirty & /*focusedData*/ 4) popularitysharepiechart_changes.focusedData = /*focusedData*/ ctx[2];
			if (dirty & /*rawData*/ 1) popularitysharepiechart_changes.rawData = /*rawData*/ ctx[0];
			popularitysharepiechart.$set(popularitysharepiechart_changes);
			const dynamictrend_changes = {};
			if (dirty & /*focusedData, selectedData*/ 6) dynamictrend_changes.data = /*focusedData*/ ctx[2] || /*selectedData*/ ctx[1];
			if (dirty & /*rawData*/ 1) dynamictrend_changes.rawData = /*rawData*/ ctx[0];
			dynamictrend.$set(dynamictrend_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(popularitybarchart.$$.fragment, local);
			transition_in(popularitysharepiechart.$$.fragment, local);
			transition_in(dynamictrend.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(popularitybarchart.$$.fragment, local);
			transition_out(popularitysharepiechart.$$.fragment, local);
			transition_out(dynamictrend.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div2);
			destroy_component(popularitybarchart);
			destroy_component(popularitysharepiechart);
			destroy_component(dynamictrend);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

async function preload() {
	const rawData = await loadCSV.call(this, "steam-game.csv");
	return { rawData };
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Steam_game", slots, []);
	let selectedData;
	let focusedData;
	let { rawData } = $$props;

	const onMouseOverHandler = function (_event, data) {
		if (!focusedData) {
			$$invalidate(1, selectedData = data);
		}
	};

	const onMouseOutHandler = () => {
		if (!focusedData) {
			$$invalidate(1, selectedData = null);
		}
	};

	const onClickEmptyArea = () => {
		$$invalidate(2, focusedData = null);
		$$invalidate(1, selectedData = null);
	};

	const onClickChartArea = (event, data) => {
		event.stopPropagation();
		$$invalidate(2, focusedData = data);
	};

	const writable_props = ["rawData"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Steam_game> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ("rawData" in $$props) $$invalidate(0, rawData = $$props.rawData);
	};

	$$self.$capture_state = () => ({
		loadCSV,
		preload,
		DynamicTrend,
		PopularityBarChart,
		PopularitySharePieChart,
		selectedData,
		focusedData,
		rawData,
		onMouseOverHandler,
		onMouseOutHandler,
		onClickEmptyArea,
		onClickChartArea
	});

	$$self.$inject_state = $$props => {
		if ("selectedData" in $$props) $$invalidate(1, selectedData = $$props.selectedData);
		if ("focusedData" in $$props) $$invalidate(2, focusedData = $$props.focusedData);
		if ("rawData" in $$props) $$invalidate(0, rawData = $$props.rawData);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		rawData,
		selectedData,
		focusedData,
		onMouseOverHandler,
		onMouseOutHandler,
		onClickEmptyArea,
		onClickChartArea
	];
}

class Steam_game extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { rawData: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Steam_game",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*rawData*/ ctx[0] === undefined && !("rawData" in props)) {
			console.warn("<Steam_game> was created without expected prop 'rawData'");
		}
	}

	get rawData() {
		throw new Error("<Steam_game>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set rawData(value) {
		throw new Error("<Steam_game>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default Steam_game;
export { preload };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguYTQxOTMzNzMuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy91dGlscy5qcyIsIi4uLy4uLy4uL3NyYy9yb3V0ZXMvc3RlYW0tZ2FtZS9pbmRleC5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgZDMgZnJvbSAnZDMnO1xuXG5leHBvcnQgY29uc3QgREFUQV9QQVRIID0gJ2RhdGEnO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbG9hZENTVihmaWxlbmFtZSkge1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMuZmV0Y2goYCR7REFUQV9QQVRIfS8ke2ZpbGVuYW1lfWApO1xuICAgIHJldHVybiBkMy5jc3ZQYXJzZShhd2FpdCByZXMudGV4dCgpKTtcbn1cbiIsIjxzY3JpcHQgY29udGV4dD1cIm1vZHVsZVwiPlxuICAgIGltcG9ydCB7IGxvYWRDU1YgfSBmcm9tICcuLi8uLi91dGlscyc7XG4gICAgZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHByZWxvYWQoKSB7XG4gICAgICAgIGNvbnN0IHJhd0RhdGEgPSBhd2FpdCBsb2FkQ1NWLmNhbGwodGhpcywgJ3N0ZWFtLWdhbWUuY3N2Jyk7XG4gICAgICAgIHJldHVybiB7IHJhd0RhdGEgfTtcbiAgICB9XG48L3NjcmlwdD5cblxuPHNjcmlwdD5cbiAgICBpbXBvcnQgRHluYW1pY1RyZW5kIGZyb20gJy4vRHluYW1pY1RyZW5kLnN2ZWx0ZSc7XG4gICAgaW1wb3J0IFBvcHVsYXJpdHlCYXJDaGFydCBmcm9tICcuL1BvcHVsYXJpdHlCYXJDaGFydC5zdmVsdGUnO1xuICAgIGltcG9ydCBQb3B1bGFyaXR5U2hhcmVQaWVDaGFydCBmcm9tICcuL1BvcHVsYXJpdHlTaGFyZVBpZUNoYXJ0LnN2ZWx0ZSc7XG5cbiAgICBsZXQgc2VsZWN0ZWREYXRhO1xuICAgIGxldCBmb2N1c2VkRGF0YTtcblxuICAgIGV4cG9ydCBsZXQgcmF3RGF0YTtcblxuICAgIGNvbnN0IG9uTW91c2VPdmVySGFuZGxlciA9IGZ1bmN0aW9uIChfZXZlbnQsIGRhdGEpIHtcbiAgICAgICAgaWYgKCFmb2N1c2VkRGF0YSkge1xuICAgICAgICAgICAgc2VsZWN0ZWREYXRhID0gZGF0YTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBjb25zdCBvbk1vdXNlT3V0SGFuZGxlciA9ICgpID0+IHtcbiAgICAgICAgaWYgKCFmb2N1c2VkRGF0YSkge1xuICAgICAgICAgICAgc2VsZWN0ZWREYXRhID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBjb25zdCBvbkNsaWNrRW1wdHlBcmVhID0gKCkgPT4ge1xuICAgICAgICBmb2N1c2VkRGF0YSA9IG51bGw7XG4gICAgICAgIHNlbGVjdGVkRGF0YSA9IG51bGw7XG4gICAgfTtcblxuICAgIGNvbnN0IG9uQ2xpY2tDaGFydEFyZWEgPSAoZXZlbnQsIGRhdGEpID0+IHtcbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIGZvY3VzZWREYXRhID0gZGF0YTtcbiAgICB9O1xuPC9zY3JpcHQ+XG5cbjxkaXYgY2xhc3M9XCJjb250YWluZXJcIiBvbjpjbGljaz17b25DbGlja0VtcHR5QXJlYX0+XG4gICAgPGgxPlxuICAgICAgICA8aW1nIHNyYz1cImljb25zL3N0ZWFtLnN2Z1wiIGFsdD1cInN0ZWFtIGljb25cIiAvPlxuICAgICAgICA8c3Bhbj5TdGVhbSBHYW1lIERhc2hib2FyZCAoMjAxMiAtIDIwMjEpPC9zcGFuPlxuICAgIDwvaDE+XG5cbiAgICA8ZGl2IGNsYXNzPVwibWFpbi1jaGFydFwiPlxuICAgICAgICA8UG9wdWxhcml0eUJhckNoYXJ0XG4gICAgICAgICAgICBvbk1vdXNlT3Zlcj17b25Nb3VzZU92ZXJIYW5kbGVyfVxuICAgICAgICAgICAgb25Nb3VzZU91dD17b25Nb3VzZU91dEhhbmRsZXJ9XG4gICAgICAgICAgICB7b25DbGlja0NoYXJ0QXJlYX1cbiAgICAgICAgICAgIHtzZWxlY3RlZERhdGF9XG4gICAgICAgICAgICB7Zm9jdXNlZERhdGF9XG4gICAgICAgICAgICB7cmF3RGF0YX1cbiAgICAgICAgLz5cbiAgICAgICAgPFBvcHVsYXJpdHlTaGFyZVBpZUNoYXJ0XG4gICAgICAgICAgICBvbk1vdXNlT3Zlcj17b25Nb3VzZU92ZXJIYW5kbGVyfVxuICAgICAgICAgICAgb25Nb3VzZU91dD17b25Nb3VzZU91dEhhbmRsZXJ9XG4gICAgICAgICAgICB7b25DbGlja0NoYXJ0QXJlYX1cbiAgICAgICAgICAgIHtzZWxlY3RlZERhdGF9XG4gICAgICAgICAgICB7Zm9jdXNlZERhdGF9XG4gICAgICAgICAgICB7cmF3RGF0YX1cbiAgICAgICAgLz5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwiZHluYW1pYy1jaGFydFwiPlxuICAgICAgICA8RHluYW1pY1RyZW5kIGRhdGE9e2ZvY3VzZWREYXRhIHx8IHNlbGVjdGVkRGF0YX0ge3Jhd0RhdGF9IC8+XG4gICAgPC9kaXY+XG48L2Rpdj5cblxuPHN0eWxlPlxuICAgIC5jb250YWluZXIge1xuICAgICAgICBmbGV4OiAxO1xuICAgICAgICBwYWRkaW5nOiAycmVtO1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMWIyODM4O1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgICAgICB1c2VyLXNlbGVjdDogbm9uZTtcbiAgICB9XG5cbiAgICAubWFpbi1jaGFydCB7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGZsZXg6IDE7XG4gICAgfVxuXG4gICAgLm1haW4tY2hhcnQgOmdsb2JhbCguYmFyKSB7XG4gICAgICAgIGZsZXg6IDI7XG4gICAgfVxuXG4gICAgLm1haW4tY2hhcnQgOmdsb2JhbCgucGllKSB7XG4gICAgICAgIGZsZXg6IDE7XG4gICAgfVxuXG4gICAgLmR5bmFtaWMtY2hhcnQge1xuICAgICAgICBtYXJnaW4tdG9wOiAzcmVtO1xuICAgICAgICBmbGV4OiAyO1xuICAgICAgICBwYWRkaW5nOiAxcmVtO1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMTMxYzI3O1xuICAgICAgICBib3JkZXItcmFkaXVzOiAwLjI1cmVtO1xuICAgICAgICBtYXJnaW4tcmlnaHQ6IDAuNXJlbTtcbiAgICAgICAgbWFyZ2luLWxlZnQ6IDAuNXJlbTtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICB9XG5cbiAgICA6Z2xvYmFsKGgxKSB7XG4gICAgICAgIGNvbG9yOiAjZjJmMmYyO1xuICAgICAgICBtYXJnaW46IDAgMC41cmVtIDFyZW0gMC41cmVtO1xuICAgICAgICBsaW5lLWhlaWdodDogMTtcbiAgICB9XG5cbiAgICA6Z2xvYmFsKGgxKSA+ICoge1xuICAgICAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xuICAgIH1cblxuICAgIDpnbG9iYWwoaDIpLFxuICAgIDpnbG9iYWwoaDMpIHtcbiAgICAgICAgY29sb3I6ICNmMmYyZjI7XG4gICAgICAgIG1hcmdpbjogMDtcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogYXV0bztcbiAgICB9XG5cbiAgICAuZHluYW1pYy1jaGFydCA6Z2xvYmFsKHN2Zykge1xuICAgICAgICBtYXJnaW4tdG9wOiAwLjVyZW07XG4gICAgfVxuXG4gICAgLmR5bmFtaWMtY2hhcnQgOmdsb2JhbChkaXYpIHtcbiAgICAgICAgZmxleDogMTtcbiAgICB9XG48L3N0eWxlPlxuIl0sIm5hbWVzIjpbImQzLmNzdlBhcnNlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFFTyxNQUFNLFNBQVMsR0FBRyxNQUFNLENBQUM7QUFDaEM7QUFDTyxlQUFlLE9BQU8sQ0FBQyxRQUFRLEVBQUU7QUFDeEMsSUFBSSxNQUFNLEdBQUcsR0FBRyxNQUFNLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzdELElBQUksT0FBT0EsUUFBVyxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7QUFDekM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozt3Q0MwQ3lCLEdBQWtCO3NDQUNuQixHQUFpQjs7Ozs7Ozs7Ozs7d0NBT2hCLEdBQWtCO3NDQUNuQixHQUFpQjs7Ozs7Ozs7Ozs7MEJBUWIsR0FBVyx3QkFBSSxHQUFZOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzZEQXpCdEIsR0FBZ0I7Ozs7Ozs7Ozs7Ozs7Ozs7NEZBeUJyQixHQUFXLHdCQUFJLEdBQVk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2VBaEU3QixPQUFPO09BQ25CLE9BQU8sU0FBUyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxnQkFBZ0I7VUFDaEQsT0FBTzs7Ozs7O0tBU2hCLFlBQVk7S0FDWixXQUFXO09BRUosT0FBTzs7T0FFWixrQkFBa0IsYUFBYSxNQUFNLEVBQUUsSUFBSTtPQUN4QyxXQUFXO21CQUNaLFlBQVksR0FBRyxJQUFJOzs7O09BSXJCLGlCQUFpQjtPQUNkLFdBQVc7bUJBQ1osWUFBWSxHQUFHLElBQUk7Ozs7T0FJckIsZ0JBQWdCO2tCQUNsQixXQUFXLEdBQUcsSUFBSTtrQkFDbEIsWUFBWSxHQUFHLElBQUk7OztPQUdqQixnQkFBZ0IsSUFBSSxLQUFLLEVBQUUsSUFBSTtFQUNqQyxLQUFLLENBQUMsZUFBZTtrQkFDckIsV0FBVyxHQUFHLElBQUk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsifQ==
